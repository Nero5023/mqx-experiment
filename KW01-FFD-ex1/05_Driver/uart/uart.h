//===========================================================================
//文件名称：uart.h
//功能概要：UART底层驱动构件头文件
//版权所有：苏州大学飞思卡尔嵌入式中心(sumcu.suda.edu.cn)
//版    本:V3.0(WYH),20140909
//备    注：KW01中有UART0、UART1和UART2总共3个UART口，SD-FSL-KW01节点上
//          默认使用UART0，所接引脚为PTA1(RX)与PTA2(TX)。
//          节点中UART[0-2]的引脚复用如下：
//                    TX(复用编号)                  RX(复用编号)
//    UART0:  PTA2(2)、PTB17(3)、PTD7(3)     PTA1(2)、PTD6(3)
//    UART1:  PTA19(3)、PTE0(3)              PTE1(3)
//    UART2:  PTE16(3)、PTD5(3)              PTE17(3)
//默认参数设置如下：
//    UART0:  PTA2、PTA1
//    UART1:  PTE0、PTE1
//    UART2:  PTE16、PTE17
//===========================================================================

#ifndef _UART_H
#define _UART_H

#include "stdio.h"
#include "includes.h"
#include <stdarg.h>

//宏定义串口号
#define UART_0    0
#define UART_1    1
#define UART_2    2
//宏定义时钟
#define MCGIRCLK   0
#define MCGFLLCLK  1
#define BUSCLK       2
//UART模块irq号
#define UART0_IRQ_NO 12

//根据串口实际硬件引脚，确定以下宏常量值。
//在此工程中，我们只使用UART0组中的第1个，UART1组中的第1个，和UART2组中的第
//1个，因此我们在此只需要将UART_0_GROUP宏定义为1,UART_1_GROUP宏定义为1，
//UART_2_GROUP宏定义为1。

//UART_0：1=PTA2、PTA1脚，2=PTA2、PTD6脚，3=PTB17、PTA1脚，4=PTB17、PTD6脚，5=PTD7、PTA1脚，6=PTD7、PTD6脚
#define UART_0_GROUP 1    //SD-FSL-KW01开发板上使用PTA2、PTA1脚

//UART_1: 1=PTE0、PTE1脚，2=PTA19、PTE1脚
#define UART_1_GROUP 1    //SD-FSL-KW01开发板上使用PTE0、PTE1脚

//UART_2: 1=PTE16、PTE17脚, 2=PTD5、PTE17脚
#define UART_2_GROUP 1    //SD-FSL-KW01开发板上使用PTE16、PTE17脚


//===========================================================================
//函数名称：uart_init
//功能概要：初始化uart模块                                                
//参数说明：uartNo:串口号：UART_0、UART_1、UART_2 
//         sysclk:串口时钟源:MCGIRCLK(4MHz)、MCGFLLCLK(48MHz)、BUSCLK(24MHz)                            
//         baud:波特率：300、600、1200、2400、4800、9600、19200、115200...
//函数返回：无
//说明：当参数为UART_0时，sel_clk只能选择MCGIR_CLK或MCGFLL_CLK，
//      若选择内部时钟MCGIR_CLK,波特率需小于19200； 当参数为UART_1或是UART_2时，
//      sel_clk只能选择BUS_CLK
//===========================================================================
void uart_init (uint_8 uartNo, uint_32 sel_clk, uint_32 baud);

//===========================================================================
//函数名称：uart_send1
//参数说明：uartNo: 串口号:UART_0、UART_1、UART_2 
//          ch:要发送的字节
//函数返回：函数执行状态：0=正常；非0=异常。
//功能概要：串行发送1个字节
//===========================================================================
uint_8 uart_send1(uint_8 uartNo, uint_8 ch);

//===========================================================================
//函数名称：uart_sendN
//参数说明：uartNo: 串口号:UART_0、UART_1、UART_2 
//          buff: 发送缓冲区
//          len:发送长度
//函数返回： 函数执行状态：0=正常；1=异常
//功能概要：串行 接收n个字节   
//===========================================================================
uint_8 uart_sendN (uint_8 uartNo ,uint_16 len ,uint_8* buff);

//===========================================================================
//函数名称：uart_send_string
//参数说明：uartNo:UART模块号:UART_0、UART_1、UART_2 
//          buff:要发送的字符串的首地址
//函数返回： 函数执行状态：0=正常；非0=异常。
//功能概要：从指定UART端口发送一个以'\0'结束的字符串
//===========================================================================
uint_8 uart_send_string(uint_8 uartNo, void* buff);

//===========================================================================
//函数名称：uart_re1
//参数说明：uartNo: 串口号:UART_0、UART_1、UART_2 
//         fp:接收返回字节的指针
//函数返回：接收成功标志:返回0，成功接收；返回1，接收失败
//功能概要：串行接收1个字节
//===========================================================================
uint_8 uart_re1 (uint_8 uartNo,uint_8* fp);

//===========================================================================
//函数名称：uart_reN
//参数说明：uartNo: 串口号:UART_0、UART_1、UART_2                                                   
//          buff: 接收缓冲区
//          len:接收长度
//函数返回：函数执行状态 0=正常;非0=异常
//功能概要：串行 接收n个字节
//===========================================================================
uint_8 uart_reN (uint_8 uartNo ,uint_16 len ,uint_8* buff);

//===========================================================================
//函数名称：uart_enable_re_int
//参数说明：uartNo: 串口号:UART_0、UART_1、UART_2 
//函数返回：无
//功能概要：开串口接收中断
//===========================================================================
void uart_enable_re_int(uint_8 uartNo);

//===========================================================================
//函数名称：uart_disable_re_int
//参数说明：uartNo: 串口号 :UART_0、UART_1、UART_2 
//函数返回：无
//功能概要：关串口接收中断
//===========================================================================
void uart_disable_re_int(uint_8 uartNo);

#endif /* _UART_H */
