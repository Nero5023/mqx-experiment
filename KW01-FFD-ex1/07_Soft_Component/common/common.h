

#ifndef COMMON_H_
#define COMMON_H_

//#include "MKL25Z4.h" // 包含芯片头文件
#include "MKL26Z4.h" // 包含芯片头文件
#include "cortex_m0p.h" // 包含cm0p内核
#include "psptypes.h"

// 置位、清位、获得寄存器一位的状态
#define BSET(bit,Register)  ((Register)|= (1<<(bit)))    //置寄存器的一位
#define BCLR(bit,Register)  ((Register) &= ~(1<<(bit)))  //清寄存器的一位
#define BGET(bit,Register)  (((Register) >> (bit)) & 1)  //获得寄存器一位的状态

//喂狗
#define WDI_FEED() {SIM_SRVCOP = 0x55;	SIM_SRVCOP = 0xAA;}

// 临界区访问函数
//=========================================================================
//函数名称：init_critical
//参数说明：无
//函数返回：无
//功能概要：初始化临界区访问控制
//=========================================================================
void  init_critical(void);

//=========================================================================
//函数名称：enter_critical
//参数说明：无
//函数返回：无
//功能概要：进入临界区
//=========================================================================
void  enter_critical(void);

//=========================================================================
//函数名称：exit_critical
//参数说明：无
//函数返回：无
//功能概要：离开临界区
//=========================================================================
void  exit_critical(void);


//============================================================================
//函数名称：enable_irq
//函数返回：无  
//参数说明：irq：irq号
//功能概要：使能irq中断 
//============================================================================
void enable_irq (uint_16 irq);

//============================================================================
//函数名称：disable_irq
//函数返回：无      
//参数说明：irq：irq号
//功能概要：禁止irq中断 
//============================================================================
void disable_irq (uint_16 irq);

//============================================================================
//函数名称：set_irq_priority
//函数返回：无      
//参数说明：irq：irq号         											   
//         prio：优先级
//功能概要：设置irq中断和优先级 
//============================================================================
void set_irq_priority (uint_16 irq, uint_16 prio);


//============================================================================
//函数名称：IntRestoreAll
//函数返回：无      
//参数说明：var：中断信号         	
//功能概要：恢复所有中断
//============================================================================
void IntRestoreAll(uint32_t var);

//============================================================================
//函数名称：IntDisableAll
//函数返回：var：当前  PRIMASK寄存器的值
//参数说明：无      	
//功能概要：屏蔽所有中断
//============================================================================
uint32_t IntDisableAll(void);

//============================================================================
//函数名称：Delay_us
//函数返回：无
//参数说明：无      	
//功能概要：延时 - 微秒级
//============================================================================
void Delay_us(uint16_t u16us);

//============================================================================
//函数名称：Delay_us
//函数返回：无
//参数说明：无      	
//功能概要：延时 - 毫秒级
//============================================================================
void Delay_ms(uint16_t u16ms);

//============================================================================
//函数名称：Wait_6_BitClks
//函数返回：无
//参数说明：无      	
//功能概要：延时 - 6比特位持续时间
//============================================================================
void Wait_6_BitClks(void);


//============================================================================
//函数名称：ftochar
//函数返回：无
//参数说明：f:所要转换的浮点数        c[]:用来保存转换后的字符串
//功能概要：将浮点数转换为字符串（保留一位小数）
//============================================================================
void ftochar(float f,uint_8 c[]);
#endif /* COMMON_H_ */
