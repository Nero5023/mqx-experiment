<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FormSpark</name>
    </assembly>
    <members>
        <member name="T:ZGDev.FormSpark.MainThreadCallerWPFControl">
            <summary>
            The main thread dispatcher to be used in WPF applications.
            </summary>
            <remarks>
            This control MUST be added to the main application window, or some other
            control that lives for the duration of the application.
            </remarks>
            <seealso cref="T:ZGDev.FormSpark.IMainThreadDispatcher"/>
        </member>
        <member name="T:ZGDev.FormSpark.IMainThreadDispatcher">
            <summary>
            Describes a "main thread dispatcher." Main thread dispatchers allow |IMainThreadEntity|s
            to request that they have their |MainThreadCallback| method be called back on the main
            thread.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.Dispatch"/>
            <seealso cref="T:ZGDev.FormSpark.IMainThreadEntity"/>
            <seealso cref="T:ZGDev.FormSpark.MainThreadCallerControl"/>
            <seealso cref="T:ZGDev.FormSpark.MainThreadCallerWPFControl"/>
        </member>
        <member name="M:ZGDev.FormSpark.IMainThreadDispatcher.GetNeedsDispatch">
            <summary>
            Determines if a dispatch is needed (a dispatch is not needed if the caller is executing
            on the main thread already).
            </summary>
            <returns>True if the caller is not executing on the main thread, false otherwise.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.IMainThreadDispatcher.RequestMainThreadCallback(ZGDev.FormSpark.IMainThreadEntity,System.Object)">
            <summary>
            Requests that an entity be called called back on the main thread.
            </summary>
            <param name="entity">The entity that is to be called back.</param>
            <param name="arg">The (optional) argument to pass to the entity.</param>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerWPFControl.#ctor">
            <summary>
            Initializes the object instance.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerWPFControl.doCallback(ZGDev.FormSpark.IMainThreadEntity,System.Object)">
            <summary>
            Performs the main thread callback.
            </summary>
            <param name="entity">The entity that requested the callback.</param>
            <param name="arg">The argument to be sent to th entity.</param>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerWPFControl.GetNeedsDispatch">
            <summary>
            Determines if a dispatch is needed (a dispatch is not needed if the caller is executing
            on the main thread already).
            </summary>
            <returns>True if the caller is not executing on the main thread, false otherwise.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerWPFControl.RequestMainThreadCallback(ZGDev.FormSpark.IMainThreadEntity,System.Object)">
            <summary>
            Requests that an entity be called called back on the main thread.
            </summary>
            <param name="entity">The entity that is to be called back.</param>
            <param name="arg">The (optional) argument to pass to the entity.</param>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerWPFControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZGDev.FormSpark.Dispatch">
            <summary>
            Internal utility class used for simplifying dispatching work items to the .NET thread pool.
            This can clean up our code since we can use Lamda expressions, allowing us to have a way
            to write small clean work items.
            </summary>
        </member>
        <member name="F:ZGDev.FormSpark.Dispatch.MainThreadDispatcher">
            <summary>
            The main thread dispatcher for this application.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IMainThreadDispatcher"/>
        </member>
        <member name="M:ZGDev.FormSpark.Dispatch.Run(ZGDev.FormSpark.Dispatch.DispatchTaskDelegate)">
            <summary>
            Dispatches a work item to the thread pool.
            </summary>
            <param name="del">The work item to dispatch.</param>
        </member>
        <member name="M:ZGDev.FormSpark.Dispatch.runTask(System.Object)">
            <summary>
            Called by the thread pool to actually run the work item.
            </summary>
            <param name="arg">The work item to run.</param>
        </member>
        <member name="T:ZGDev.FormSpark.Dispatch.DispatchTaskDelegate">
            <summary>
            Delegate describing our "work items." They take no arguments and return nothing.
            </summary>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.SizeFValueHandler">
            <summary>
            Value handler for System.Drawing.SizeF.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.SizeF"/>
        </member>
        <member name="T:ZGDev.FormSpark.IValueHandler`1">
            <summary>
            Describes a "value handler." Value handlers interpolate to values. For example,
            an |IValueHandler&lt;int&gt;| would interpolate integer values.
            </summary>
            <typeparam name="T">The type that the value handler manages.</typeparam>
        </member>
        <member name="M:ZGDev.FormSpark.IValueHandler`1.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.IValueHandler`1.Interpolate(`0,`0,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.SizeFValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.SizeFValueHandler.Interpolate(System.Drawing.SizeF,System.Drawing.SizeF,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.PointValueHandler">
            <summary>
            Value handler for System.Drawing.Point.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.Point"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.PointValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.PointValueHandler.Interpolate(System.Drawing.Point,System.Drawing.Point,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.DoubleValueHandler">
            <summary>
            Value handler for double-precision floating point values.
            </summary>
            <seealso cref="!:IValueHandler"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.DoubleValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.DoubleValueHandler.Interpolate(System.Double,System.Double,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.RectangleValueHandler">
            <summary>
            Value handler for System.Drawing.Rectangle.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.Rectangle"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.RectangleValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.RectangleValueHandler.Interpolate(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.ColorValueHandler">
            <summary>
            Value handler for System.Drawing.Color.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.ColorValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.ColorValueHandler.Interpolate(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.MainThreadCallbackDelegate">
            <summary>
            Called by the main thread dispatcher on the main application thread.
            </summary>
            <param name="entity">The entity that requested the callback.</param>
            <param name="arg">An (optional) argument that is to be passed to the entity.</param>
        </member>
        <member name="T:ZGDev.FormSpark.IMainThreadEntity">
            <summary>
            Describes an entity that can be called back on the main thread.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IMainThreadDispatcher"/>
        </member>
        <member name="M:ZGDev.FormSpark.IMainThreadEntity.MainThreadCallback(System.Object)">
            <summary>
            Called on the main thread by the main thread dispatcher.
            </summary>
            <param name="arg">An (optional) argument for user data.</param>
        </member>
        <member name="T:ZGDev.FormSpark.IAnimationCurve">
            <summary>
            Describes an "animation curve." Animation curves are timing functions that map a
            T value (elapsed time / total time = %complete) to an interpolation value to be passed
            to a value handler.
            </summary>
            <seealso cref="!:IValueHandler"/>
        </member>
        <member name="M:ZGDev.FormSpark.IAnimationCurve.SetDuration(System.Single)">
            <summary>
            Sets the duration of the animation curve.
            </summary>
            <param name="secs">The duration in seconds.</param>
        </member>
        <member name="M:ZGDev.FormSpark.IAnimationCurve.GetDuration">
            <summary>
            Gets the duration of the animation curve.
            </summary>
            <returns>The duration of the animation curve (in seconds).</returns>
        </member>
        <member name="M:ZGDev.FormSpark.IAnimationCurve.GetElapsed">
            <summary>
            Gets the current elapsed time for the animation curve. This is updated
            with every call to |Update|.
            </summary>
            <returns>The current elapsed time (in seconds).</returns>
            <see cref="M:ZGDev.FormSpark.IAnimationCurve.Update(System.Single)"/>
        </member>
        <member name="M:ZGDev.FormSpark.IAnimationCurve.SetElapsed(System.Single)">
            <summary>
            Sets the current elapsed time.
            </summary>
            <param name="secs">The elapsed time in seconds.</param>
        </member>
        <member name="M:ZGDev.FormSpark.IAnimationCurve.Reset">
            <summary>
            Resets the elapsed time.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.IAnimationCurve.Update(System.Single)">
            <summary>
            Updates the elapsed time and returns the current interpolation
            value (where inbetween our to [1.0] and from [0.0] values we are at).
            </summary>
            <param name="timeDelta">
            The number of seconds that have elapsed since our last call to |Update|,
            or the amount of time we want to increase our elapsed time by.
            </param>
            <returns>The current interpolation value.</returns>
            <remarks>
            Implementations SHOULD "clamp" the T value (elapsed / duration) so that it is
            in [0,1].
            </remarks>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.WPFColorValueHandler">
            <summary>
            Value handler for System.Windows.Media.Color.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Windows.Media.Color"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.WPFColorValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.WPFColorValueHandler.Interpolate(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.PointFValueHandler">
            <summary>
            Value handler for System.Drawing.PointF.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.PointF"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.PointFValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.PointFValueHandler.Interpolate(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.AnimationCurves.LinearCurve">
            <summary>
            Represents a linear timing function for animations.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.AnimationCurve"/>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.SetDuration(System.Single)">
            <summary>
            Sets the duration of the animation curve.
            </summary>
            <param name="secs">The duration in seconds.</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.GetDuration">
            <summary>
            Gets the duration of the animation curve.
            </summary>
            <returns>The duration of the animation curve (in seconds).</returns>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.GetElapsed">
            <summary>
            Gets the current elapsed time for the animation curve. This is updated
            with every call to |Update|.
            </summary>
            <returns>The current elapsed time (in seconds).</returns>
            <see cref="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.Update(System.Single)"/>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.SetElapsed(System.Single)">
            <summary>
            Sets the current elapsed time.
            </summary>
            <param name="secs">The elapsed time in seconds.</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.Reset">
            <summary>
            Resets the elapsed time.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.LinearCurve.Update(System.Single)">
            <summary>
            Updates the elapsed time and returns the current interpolation
            value (where inbetween our to [1.0] and from [0.0] values we are at).
            </summary>
            <param name="timeDelta">
            The number of seconds that have elapsed since our last call to |Update|,
            or the amount of time we want to increase our elapsed time by.
            </param>
            <returns>The current interpolation value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.RectangleFValueHandler">
            <summary>
            Value handler for System.Drawing.RectangleF.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.RectangleF"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.RectangleFValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.RectangleFValueHandler.Interpolate(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.LongValueHandler">
            <summary>
            Value handler for long integer values.
            </summary>
            <seealso cref="!:IValueHandler"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.LongValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.LongValueHandler.Interpolate(System.Int64,System.Int64,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.DateTimeValueHandler">
            <summary>
            Value handler for System.DateTime.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.DateTimeValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.DateTimeValueHandler.Interpolate(System.DateTime,System.DateTime,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.Animator">
            <summary>
            A utility class that handles the timing and threading of animation contexts.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.AnimationContext"/>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.ManualInit">
            <summary>
            "Manually" initializes the animator. This should be called by non-UI applications.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.InitWithControl(System.Windows.Forms.Control)">
            <summary>
            Initializes the animator for a Windows Forms application.
            </summary>
            <param name="ctrl">A control that lives for the duration of the entire application (e.g. the main window).</param>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.InitWithWPFPanel(System.Windows.Controls.Panel)">
            <summary>
            Initializes the animator for a WPF application.
            </summary>
            <param name="ctrl">
            A control that lives for the duration of the entire application (e.g. the main window's content panel).
            </param>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.ManualExit">
            <summary>
            Should be called by non-UI applications when the application is terminating.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.ApplicationExiting(System.Object,System.EventArgs)">
            <summary>
            Called by the .NET runtime when the application is ending.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.WPFApplicationExiting(System.Object,System.Windows.ExitEventArgs)">
            <summary>
            Called by the .NET runtime when the application is ending.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.Run(System.String,ZGDev.FormSpark.AnimationContext)">
            <summary>
            Runs an animation context with a given name. Any animation with the same name
            will be replaced.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="context">The animation context.</param>
            <remarks>
            As the list of animations must be locked before the animation
            can be added, this task is grouped into a work item and dispatched
            to the thread pool to prevent the calling thread from hanging
            while a lock is acquired.
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.IsAnimationRunning(System.String)">
            <summary>
            Determines if an animation is running.
            </summary>
            <param name="name">The name of the animation.</param>
            <returns>
            True if the animation is running, or false if the animation has completed or doesn't exist.
            </returns>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.CancelAnimation(System.String)">
            <summary>
            Cancels an anmiation with a given name if it exists.
            </summary>
            <param name="name">The name of the animation.</param>
            <remarks>
            As the list of animations must be locked before the animation
            can be removed, this task is grouped into a work item and dispatched
            to the thread pool to prevent the calling thread from hanging
            while a lock is acquired.
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.Animator.run">
            <summary>
            This is our "run" method for the animation thread.
            </summary>
        </member>
        <member name="T:ZGDev.FormSpark.AnimationContext">
            <summary>
            Describes a list of animations on object properties.
            </summary>
        </member>
        <member name="F:ZGDev.FormSpark.AnimationContext.DefaultRequiresMainThread">
            <summary>
            The default value for animations requring that the property be set on the main thread.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.#ctor">
            <summary>
            Initializes the animation context with the default animation curve
            |AnimationCurve.Default|.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.#ctor(ZGDev.FormSpark.IAnimationCurve)">
            <summary>
            Initializes the animation context with the specified
            animation curve.
            </summary>
            <param name="curve">The animation curve</param>
            <exception cref="T:System.ArgumentNullException">Thrown if |curve| is null.</exception>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.AddDescriptor``2(ZGDev.FormSpark.AnimationContext.DescriptorKey{``0,``1},ZGDev.FormSpark.AnimationContext.Descriptor{``0,``1})">
            <summary>
            Adds an animation descriptor.
            </summary>
            <typeparam name="For">The type of the object that we are animating.</typeparam>
            <typeparam name="T">The type of the property that we are animating.</typeparam>
            <param name="key">The descriptor key.</param>
            <param name="desc">The animation descriptor.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either |key| or |desc| are null.</exception>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.AddAnimation``2(``0,``1,``1,System.String,System.Boolean)">
            <summary>
            Adds an animation to the context.
            </summary>
            <typeparam name="For">The type of the object.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="obj">The object.</param>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="propName">The name of the property to animate.</param>
            <param name="requiresMainThread">Does the property have to be set on the main thread?</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.AddAnimation``2(``0,``1,``1,System.String)">
            <summary>
            Adds an animation to the context.
            </summary>
            <typeparam name="For">The type of the object.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="obj">The object.</param>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="propName">The name of the property to animate.</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.AddAnimation``2(``0,``1,System.String,System.Boolean)">
            <summary>
            Adds an animation to the context.
            </summary>
            <typeparam name="For">The type of the object.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="obj">The object.</param>
            <param name="to">The to value.</param>
            <param name="propName">The name of the property to animate.</param>
            <param name="requiresMainThread">Does the property have to be set on the main thread?</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.AddAnimation``2(``0,``1,System.String)">
            <summary>
            Adds an animation to the context.
            </summary>
            <typeparam name="For">The type of the object.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="obj">The object.</param>
            <param name="to">The to value.</param>
            <param name="propName">The name of the property to animate.</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.Update(System.Single)">
            <summary>
            Internally used by the API to update the context.
            </summary>
            <param name="elapsed">The time delta.</param>
        </member>
        <member name="E:ZGDev.FormSpark.AnimationContext.AnimationContextCompleted">
            <summary>
            Fired when all animations in this context have completed.
            </summary>
            <remarks>
            There is no guarantee as to which thread this will be called from.
            </remarks>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationContext.Curve">
            <summary>
            The animation curve that the animation context uses.
            </summary>
            <remarks>
            After the animation context has started, it is best not to call
            anything but this curve's getters.
            </remarks>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationContext.Completed">
            <summary>
            Has the animation context completed?
            </summary>
            <remarks>
            This property is read-only.
            </remarks>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationContext.KeepAfterCompleted">
            <summary>
            Determines if this context should be kept after completing.
            </summary>
            <remarks>
            This is automatically set to the same value as |Loops|.
            </remarks>
            <seealso cref="P:ZGDev.FormSpark.AnimationContext.Loops"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationContext.Loops">
            <summary>
            Determines if this context loops infinitely.
            </summary>
            <remarks>
            The value of |KeepAfterCompleted| is set to the same value
            of |Loops| when |Loops| is changed.
            </remarks>
            <seealso cref="P:ZGDev.FormSpark.AnimationContext.KeepAfterCompleted"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationContext.Reverses">
            <summary>
            Determines if this context reverses when it finishes animating
            from the "from" value to the "to" value.
            </summary>
        </member>
        <member name="T:ZGDev.FormSpark.AnimationContext.AnimationContextCompletedDelegate">
            <summary>
            An animation context has completed all animations.
            </summary>
            <param name="context">The animation context that completed.</param>
        </member>
        <member name="T:ZGDev.FormSpark.AnimationContext.InvalidPropertyException">
            <summary>
            Thrown when the specified property to animate doesn't exist or doesn't have
            the correct type.
            </summary>
            <seealso cref="T:System.ArgumentException"/>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationContext.InvalidPropertyException.#ctor(System.String)">
            <summary>
            Initiaizes the exception.
            </summary>
            <param name="propName">The name of the invalid property.</param>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationContext.InvalidPropertyException.PropertyName">
            <summary>
            The name of the invalid property.
            </summary>
        </member>
        <member name="T:ZGDev.FormSpark.ValueAnimator">
            <summary>
            A utility class used to manage value handlers.
            </summary>
            <remarks>
            Currently sets up built-in value handlers for:
              * int
              * long
              * float
              * double
              * System.DateTime
              * System.Drawing.Color
              * System.Drawing.Point
              * System.Drawing.PointF
              * System.Drawing.Size
              * System.Drawing.SizeF
              * System.Drawing.Rectangle
              * System.Drawing.RectangleF
              * System.Windows.Media.Color
            
            Any additional value handlers MUST be registed with this class.
            </remarks>
            <seealso cref="!:IValueHandler"/>
        </member>
        <member name="F:ZGDev.FormSpark.ValueAnimator.Shared">
            <summary>
            The shared instance for the FormSpark API.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.ValueAnimator.#ctor">
            <summary>
            Initializes the object instance.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.ValueAnimator.RegisterValueHandler``1(ZGDev.FormSpark.IValueHandler{``0})">
            <summary>
            Registers a value handler.
            </summary>
            <typeparam name="T">The type the value handler manages.</typeparam>
            <param name="handler">The value handler.</param>
        </member>
        <member name="M:ZGDev.FormSpark.ValueAnimator.GetRegisteredValueHandler``1">
            <summary>
            Gets a registered value handler for a specified type.
            </summary>
            <typeparam name="T">The managed type.</typeparam>
            <returns>
            The registered value handler for the type or null if no value handler is registered
            for the specified type.
            </returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueAnimator.Interpolate``1(``0,``0,System.Single)">
            <summary>
            Interpolates two values.
            </summary>
            <typeparam name="T">The type of the value to interpolate.</typeparam>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The interpolation amount.</param>
            <returns>
            The interpolated value or the default value for T if no value handler is registered
            for the specified type.
            </returns>
            <seealso cref="!:IValueHandler"/>
            <remarks>
            Internally this method uses |T| to lookup the proper value handler then
            calls the value handlers |Interpolate| method.
            </remarks>
        </member>
        <member name="T:ZGDev.FormSpark.MainThreadCallerControl">
            <summary>
            The main thread dispatcher to be used in Windows Forms applications.
            </summary>
            <remarks>
            This control MUST be added to the main application window, or some other
            control that lives for the duration of the application.
            </remarks>
            <seealso cref="T:ZGDev.FormSpark.IMainThreadDispatcher"/>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerControl.#ctor">
            <summary>
            Initializes the object instance.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerControl.doCallback(ZGDev.FormSpark.IMainThreadEntity,System.Object)">
            <summary>
            Performs the main thread callback.
            </summary>
            <param name="entity">The entity that requested the callback.</param>
            <param name="arg">The argument to be sent to th entity.</param>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerControl.GetNeedsDispatch">
            <summary>
            Determines if a dispatch is needed (a dispatch is not needed if the caller is executing
            on the main thread already).
            </summary>
            <returns>True if the caller is not executing on the main thread, false otherwise.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.MainThreadCallerControl.RequestMainThreadCallback(ZGDev.FormSpark.IMainThreadEntity,System.Object)">
            <summary>
            Requests that an entity be called called back on the main thread.
            </summary>
            <param name="entity">The entity that is to be called back.</param>
            <param name="arg">The (optional) argument to pass to the entity.</param>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.SizeValueHandler">
            <summary>
            Value handler for System.Drawing.Size.
            </summary>
            <seealso cref="!:IValueHandler"/>
            <seealso cref="T:System.Drawing.Size"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.SizeValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.SizeValueHandler.Interpolate(System.Drawing.Size,System.Drawing.Size,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.IntValueHandler">
            <summary>
            Value handler for integer values.
            </summary>
            <seealso cref="!:IValueHandler"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.IntValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.IntValueHandler.Interpolate(System.Int32,System.Int32,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.ValueHandlers.FloatValueHandler">
            <summary>
            Value handler for single-precision floating point values.
            </summary>
            <seealso cref="!:IValueHandler"/>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.FloatValueHandler.GetManagedType">
            <summary>
            Gets the type that this value handler manages.
            </summary>
            <returns>The type that this value handler manages.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.ValueHandlers.FloatValueHandler.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates two values. This uses a "line" between |from| and
            |to| and calculates a value on it that is %|amount| between the two
            endpoints.
            </summary>
            <param name="from">The from value.</param>
            <param name="to">The to value.</param>
            <param name="amount">The amount to interpolate. The value is in [0,1].</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:ZGDev.FormSpark.AnimationCurves.BezierCurve">
            <summary>
            Represents a timing function as a Bezier curve with the current interpolation value on the Y axis
            and the percentage complete for the animation on the X axis. The curve is approximated (linear approximation
            using cached values at a fixed number of points along the curve).
            </summary>
            <remarks>
            The Bezier function is given as:
                F(t) = (1-t)^3*p0 + 3t*(1-t)^2*p1 + 3t^2*(1-t)*p2 + t^3*p3
                F(t) = [Fx(t), Fy(t)]
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a |BezierCurve| intance.
            </summary>
            <param name="p0">Control point #1.</param>
            <param name="p1">Control point #2.</param>
            <param name="p2">Control point #3.</param>
            <param name="p3">Control point #4.</param>
            <remarks>
            The X and Y values in each of the control points should be in [0,1].
            The control points MUST also follow the rule:
                p0.X &lt;= p1.X &lt;= p2.X &lt;= p3.X
                p0.Y &lt;= p1.Y &lt;= p2.Y &lt;= p3.Y
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a |BezierCurve| intance. Control point 1 is set to (0,0)
            and control point 4 is set to (1,1).
            </summary>
            <param name="p1">Control point #2.</param>
            <param name="p2">Control point #3.</param>
            <remarks>
            The X and Y values in each of the control points should be in [0,1].
            The control points MUST also follow the rule:
                p0.X &lt;= p1.X &lt;= p2.X &lt;= p3.X
                p0.Y &lt;= p1.Y &lt;= p2.Y &lt;= p3.Y
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.#ctor">
            <summary>
            Initializes a |BezierCurve| intance. Control point 1 is set to (0,0)
            and control point 4 is set to (1,1). Control points 2 and 3 are both
            set to (0.25,0.1).
            </summary>
            <remarks>
            The X and Y values in each of the control points should be in [0,1].
            The control points MUST also follow the rule:
                p0.X &lt;= p1.X &lt;= p2.X &lt;= p3.X
                p0.Y &lt;= p1.Y &lt;= p2.Y &lt;= p3.Y
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.calculateBezierXComponent(System.Single)">
            <summary>
            Calculates the X component of the point on the Bezier curve
            for a certaion T value.
            </summary>
            <param name="t">T value for our parametric function.</param>
            <returns>Fx(t)</returns>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.calculateBezierYComponent(System.Single)">
            <summary>
            Calculates the Y component of the point on the Bezier curve
            for a certaion T value.
            </summary>
            <param name="t">T value for our parametric function.</param>
            <returns>Fy(t)</returns>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.estimateQForT(System.Single,System.Single)">
            <summary>
            Estimates a Q value for a T value (the Q value is the value such that
            Fx(Q) = T).
            </summary>
            <param name="lastQ">The last Q value to be returned.</param>
            <param name="t">T value.</param>
            <returns>Estimated Q value.</returns>
            <remarks>
            To help speed up calculations, this method accepts the last Q value
            that was returned from this method. Since we force the components of the
            control points to follow the rule:
                p0 &lt; p1 &lt; p2 &lt; p3
            We know that for increasing values of T, the Q value will also increase.
            Thus when estimating Q values for increasing values of T we can start
            our search at the last Q value.
            </remarks>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.calculateLookups">
            <summary>
            Calculates our lookup values that we use later for our linear
            approximations.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.SetDuration(System.Single)">
            <summary>
            Sets the duration of the animation curve.
            </summary>
            <param name="secs">The duration in seconds.</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.GetDuration">
            <summary>
            Gets the duration of the animation curve.
            </summary>
            <returns>The duration of the animation curve (in seconds).</returns>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.GetElapsed">
            <summary>
            Gets the current elapsed time for the animation curve. This is updated
            with every call to |Update|.
            </summary>
            <returns>The current elapsed time (in seconds).</returns>
            <see cref="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.Update(System.Single)"/>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.SetElapsed(System.Single)">
            <summary>
            Sets the current elapsed time.
            </summary>
            <param name="secs">The elapsed time in seconds.</param>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.Reset">
            <summary>
            Resets the elapsed time.
            </summary>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.valueForT(System.Single)">
            <summary>
            Uses linear approximation to approximate a Q value for the given T value
            using our lookup table.
            </summary>
            <param name="t">The T value.</param>
            <returns>Estimated Q value.</returns>
        </member>
        <member name="M:ZGDev.FormSpark.AnimationCurves.BezierCurve.Update(System.Single)">
            <summary>
            Updates the elapsed time and returns the current interpolation
            value (where inbetween our to [1.0] and from [0.0] values we are at).
            </summary>
            <param name="timeDelta">
            The number of seconds that have elapsed since our last call to |Update|,
            or the amount of time we want to increase our elapsed time by.
            </param>
            <returns>The current interpolation value.</returns>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.BezierCurve.P0">
            <summary>
            Control point #1.
            </summary>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.BezierCurve.P1">
            <summary>
            Control point #2.
            </summary>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.BezierCurve.P2">
            <summary>
            Control point #3.
            </summary>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.BezierCurve.P3">
            <summary>
            Control point #4.
            </summary>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.BezierCurve.Item(System.Int32)">
            <summary>
            Returns the control point at the given index.
            </summary>
            <param name="index">The control point index.</param>
            <returns>The control point at the specific index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if |index| is less than 0 or greater than 3.</exception>
        </member>
        <member name="T:ZGDev.FormSpark.AnimationCurves.AnimationCurve">
            <summary>
            A utility class for creating commonly used animation curves. It is important to remember
            that these methods don't return a shared instance but rather create instances on demand.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.LinearCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.BezierCurve"/>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.AnimationCurve.Linear">
            <summary>
            Linear animation curve.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.LinearCurve"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.AnimationCurve.Default">
            <summary>
            Default animation curve (Bezier similar to |EaseIn| but doesn't start off as slow)
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.BezierCurve"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.AnimationCurve.EaseIn">
            <summary>
            Animation curve that causes animations to "ease in." Animations start of slow then
            get faster.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.BezierCurve"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.AnimationCurve.EaseOut">
            <summary>
            Animation curve that causes animations to "ease out." Animations start off
            comparatively fast then slow down as they finish.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.BezierCurve"/>
        </member>
        <member name="P:ZGDev.FormSpark.AnimationCurves.AnimationCurve.EaseInEaseOut">
            <summary>
            Animation curve that is a combination of |EaseIn| and |EaseOut|. Animations start of slow,
            get faster in the middle, then slow down again as they finish.
            </summary>
            <seealso cref="T:ZGDev.FormSpark.IAnimationCurve"/>
            <seealso cref="T:ZGDev.FormSpark.AnimationCurves.BezierCurve"/>
        </member>
    </members>
</doc>
